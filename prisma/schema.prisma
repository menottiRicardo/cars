// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Car {
    id          String         @id @default(cuid())
    images      Images[]
    year        Int
    make        String
    model       String
    traction    String
    price       Float
    kms         Int
    appoinments Appointments[]
    registryUri String
}

model Images {
    id    String  @id @default(cuid())
    uri   String
    Car   Car?    @relation(fields: [carId], references: [id])
    carId String?
}

model Appointments {
    id    String  @id @default(cuid())
    Car   Car?    @relation(fields: [carId], references: [id])
    carId String?
}

model Make {
    id     String  @id @default(cuid())
    name   String
    models Model[]
}

model Model {
    id     String  @id @default(cuid())
    name   String
    Make   Make?   @relation(fields: [makeId], references: [id])
    makeId String?
}
